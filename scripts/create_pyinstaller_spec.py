#!/usr/bin/env python3
"""
Script to generate PyInstaller spec file for KivyMD Chat UI
"""

import os
from pathlib import Path

def create_spec_file():
    """Create PyInstaller spec file with proper Kivy configuration"""
    project_root = Path(__file__).parent.parent.absolute()
    spec_path = project_root / "KivyChatUI.spec"
    
    # Create runtime hooks directory
    runtime_hooks_dir = project_root / "scripts"
    runtime_hooks_dir.mkdir(exist_ok=True)
    
    # Create Kivy hook file
    kivy_hook = runtime_hooks_dir / "kivy_hook.py"
    with open(kivy_hook, "w") as f:
        f.write("""
import os
import sys

# Configure Kivy before any imports
os.environ["KIVY_NO_ARGS"] = "1"
os.environ["KIVY_NO_CONSOLELOG"] = "1"
os.environ["KIVY_GL_BACKEND"] = "mock"
os.environ["KIVY_WINDOW"] = "mock"
os.environ["KIVY_DPI"] = "96"
os.environ["KIVY_METRICS_DENSITY"] = "1"

# Initialize metrics before KivyMD imports
from kivy.metrics import Metrics
Metrics.density = 1
Metrics.dpi = 96

# Prevent window creation during import
from kivy.base import EventLoop
def dummy_ensure_window(*args, **kwargs): pass
EventLoop.ensure_window = dummy_ensure_window
""")
    
    # Generate spec file content
    spec_content = '''# -*- mode: python ; coding: utf-8 -*-
"""
KivyMD Chat UI PyInstaller Specification
Auto-generated by create_pyinstaller_spec.py
"""

import os
import sys
from pathlib import Path
from PyInstaller.utils.hooks import collect_data_files, collect_submodules

# Get project root (absolute path since __file__ not available in spec context)
project_root = Path(r"{}")

# Application metadata
app_name = "KivyChatUI"
app_version = "0.1.0"
app_description = "Modern KivyMD Chat UI Frontend"

# Main script
main_script = str(project_root / "main.py")

# Data files to include
kivymd_data = collect_data_files("kivymd")
kivy_data = collect_data_files("kivy")

# Include chat_ui package data
chat_ui_data = []
chat_ui_path = project_root / "chat_ui"
if chat_ui_path.exists():
    for file_path in chat_ui_path.rglob("*"):
        if file_path.is_file() and not file_path.name.startswith('.'):
            rel_path = file_path.relative_to(project_root)
            chat_ui_data.append((str(file_path), str(rel_path.parent)))

# Include platform_utils
platform_utils_data = []
platform_utils_path = project_root / "platform_utils"
if platform_utils_path.exists():
    for file_path in platform_utils_path.rglob("*.py"):
        if file_path.is_file():
            rel_path = file_path.relative_to(project_root)
            platform_utils_data.append((str(file_path), str(rel_path.parent)))

# Combine all data files
datas = kivymd_data + kivy_data + chat_ui_data + platform_utils_data

# Hidden imports for KivyMD and dependencies
hiddenimports = [
    # Core Kivy modules
    'kivy.core.window.window_sdl2',
    'kivy.core.window',
    'kivy.core.image',
    'kivy.core.clipboard',
    'kivy.core.text',
    'kivy.core.audio',
    'kivy.graphics',
    'kivy.graphics.texture',
    'kivy.graphics.svg',
    'kivy.metrics',
    'kivy.utils',
    'kivy.clock',
    'kivy.lang',
    'kivy.factory',
    'kivy.properties',
    'kivy.event',
    'kivy.logger',
    'kivy.config',
    
    # KivyMD modules
    'kivymd',
    'kivymd.app',
    'kivymd.uix',
    'kivymd.uix.screen',
    'kivymd.uix.boxlayout',
    'kivymd.uix.card',
    'kivymd.uix.label',
    'kivymd.uix.textfield',
    'kivymd.uix.button',
    'kivymd.uix.scrollview',
    'kivymd.theming',
    'kivymd.color_definitions',
    'kivymd.font_definitions',
    'kivymd.icon_definitions',
    'kivymd.material_resources',
    
    # Application modules
    'chat_ui',
    'chat_ui.config',
    'chat_ui.modern_chat',
    'chat_ui.theme',
    'chat_ui.websocket_client',
    'chat_ui.android_stt',
    'chat_ui.permissions',
    'platform_utils',
    'platform_utils.desktop',
    'platform_utils.android',
    
    # Dependencies
    'websockets',
    'asyncio',
    'concurrent.futures',
    'threading',
    'queue',
    'json',
    'logging',
    'pathlib',
    'plyer',
    'plyer.platforms.linux',
]

# Runtime hooks
kivy_hook = project_root / "scripts" / "kivy_hook.py"

# PyInstaller Analysis
a = Analysis(
    [main_script],
    pathex=[str(project_root)],
    binaries=[],
    datas=datas,
    hiddenimports=hiddenimports,
    hookspath=[],
    hooksconfig={{}},
    runtime_hooks=[str(kivy_hook)],
    excludes=[
        'tkinter',
        'matplotlib',
        'numpy',
        'scipy',
        'PIL',
        'PyQt5',
        'PyQt6',
        'PySide2',
        'PySide6',
        'wx',
        'django',
        'flask',
        'tornado',
        'selenium',
        'requests',
        'urllib3',
        'certifi',
    ],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=None,
    noarchive=False,
)

# Remove duplicate data files
pyz = PYZ(a.pure, a.zipped_data, cipher=None)

# Create executable
exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name=app_name,
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,  # GUI application
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=None,
)
'''.format(project_root)
    
    # Write spec file
    with open(spec_path, "w") as f:
        f.write(spec_content)
    
    print(f"Created PyInstaller spec file at: {spec_path}")
    print(f"Created Kivy hook file at: {kivy_hook}")

if __name__ == "__main__":
    create_spec_file() 